# worker_processes  1;
daemon  off;
master_process off;
error_log  logs/err-1.log  error;
pid        logs/1.pid;

events {
    worker_connections  256;
}

http {
    log_format accfmt '$remote_addr [$time_local]'
                       ' "$request" $status $bytes_sent $request_time'
                       ;

    access_log logs/acc-1.log accfmt;

    lua_package_path  '$prefix/../../lib/?.lua;;';
    lua_package_cpath  '$prefix/../../clib/?.so;;';

    lua_shared_dict paxos_lock 10m;
    lua_socket_log_errors off;

    init_worker_by_lua ' ident = "127.0.0.1:9901" ';
    init_worker_by_lua '
        cluster_id = "x"
        cc = require("nginx_cluster").new({
            cluster_id = cluster_id,
            ident = ident,
            path = "/tmp/paxos",
            get_standby = function()
                return {
                    "127.0.0.1:9901",
                    "127.0.0.1:9902",
                    "127.0.0.1:9903",
                    "127.0.0.1:9904",
                    "127.0.0.1:9905",
                    "127.0.0.1:9906",
                }
            end,
        })
    ';

    server {
        listen 9901;
        location / { content_by_lua 'cc.server:handle_req()'; }
    }

    server {
        listen       9801;

        location /get/ {
            rewrite_by_lua '

            # strip /get/
            local fn = ngx.var.uri:sub(6)

            local mems = cc:members()
            local hsh = ngx.crc32_long(fn)

            local dst = mems[ (hsh % #mems) + 1 ]

            if dst == ident then
                ngx.req.set_uri("/www/" .. fn, true )
            else
                dst = dst:gsub("990", "980")
                ngx.req.set_uri("/proxy/" .. dst .. "/get/" .. fn, true)
            end
            ';
        }

        location /www {
            content_by_lua 'ngx.say(ngx.var.uri)';
        }

        location /proxy/ {
            set_by_lua $addr 'return ngx.var.uri:sub(8)';
            proxy_pass http://$addr;
        }
    }
}
# vim: ft=ngx
