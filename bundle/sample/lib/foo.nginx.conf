worker_processes  1;
error_log  logs/err-$ident.log  error;
pid        logs/$ident.pid;

events {
    worker_connections  256;
}

http {
    log_format accfmt '$remote_addr [$time_local]'
                       ' "$request" $status $bytes_sent $request_time'
                       ;

    access_log logs/acc-$ident.log accfmt;

    lua_package_path  '$prefix/../../lib/?.lua;;';
    lua_package_cpath  '$prefix/../../clib/?.so;;';

    lua_shared_dict paxos_lock 10m;
    lua_socket_log_errors off;

    init_worker_by_lua '
        local nc = require("nginx_cluster");
        cc = nginx_cluster.new({
            cluster_id = "x",
            ident = "127.0.0.1:9081",
            path = "/tmp/paxos",
            standby = {
                "127.0.0.1:9081",
                "127.0.0.1:9082",
                "127.0.0.1:9083",
                "127.0.0.1:9084",
                "127.0.0.1:9085",
                "127.0.0.1:9086",
            },
        })
        srv = cc.server;
    ';

    server {
        listen 9081;
        location / { content_by_lua 'srv:handle_req()'; }
    }

    server {
        listen       908$ident;

        location /user_api/get_leader {
            content_by_lua '

            local function output( code, ... )
                ngx.status = code
                ngx.print( ... )
                ngx.eof()
                ngx.exit( ngx.HTTP_OK )
            end

            local s = require("simple").cluster.server
            local paxos, err, errmes = s:new_paxos({cluster_id=ngx.var.arg_cluster_id, ident=ngx.var.arg_ident})
            if err then
                output( 500, err )
            end

            local _l, err, errmes = paxos:local_get("leader")
            if err then
                output( 500, err )
            end

            local _m, err, errmes = paxos:local_get_members()
            if err then
                output( 500, err )
            end

            local ids = {}

            for k, _ in pairs( _m.val or {} ) do
                table.insert( ids, k )
            end
            table.sort(ids)
            local ids = table.concat( ids, "," )

            local leader, ver = _l.val, _l.ver
            if leader then
                output( 200,
                        "ver:", _l.ver,
                        " leader:", leader.ident,
                        " lease:", leader.__lease,
                        " members:", ids
                )
            else
                output( 404, "- -" )
            end
            ';
        }
    }
}
# vim: ft=ngx
